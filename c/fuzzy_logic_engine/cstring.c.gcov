        -:    0:Source:cstring.c
        -:    0:Programs:7
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include "cstring.h"
        -:    4:
      314:    5:snode * InitSnode( char ch )
        -:    6:{
      314:    7:    snode * ptr = NULL;
        -:    8:
      314:    9:    ptr = malloc( sizeof(snode) );
      314:   10:    ptr->next = NULL;
      314:   11:    ptr->ch = ch;
        -:   12:
      314:   13:    return ptr;
        -:   14:}
        -:   15:
      256:   16:void FreeSnode( snode * self )
        -:   17:{
      256:   18:    free(self);
      256:   19:    self = NULL;
      256:   20:}
        -:   21:
       53:   22:cstring * InitCstring( char * source )
        -:   23:{
       53:   24:    cstring * str = NULL;
       53:   25:    int i = 0;
       53:   26:    snode * sptr = NULL;
       53:   27:    snode * cur = NULL;
        -:   28:
       53:   29:    str = malloc( sizeof(cstring) );
       53:   30:    if ( source == NULL )
        -:   31:    {
        1:   32:        str->first = NULL;
        1:   33:        str->count = 0;
        -:   34:    }
        -:   35:    else
        -:   36:    {
       52:   37:        sptr = InitSnode(source[0]);
       52:   38:        str->first = cur = sptr;
      290:   39:        for ( i = 1; source[i] != '\0'; i++ )
        -:   40:        {
      238:   41:            sptr = InitSnode(source[i]);
      238:   42:            cur->next = sptr;
      238:   43:            cur = sptr;
        -:   44:        }
       52:   45:        str->count = i;
        -:   46:    }
        -:   47:
       53:   48:    return str;
        -:   49:}
        -:   50:
       39:   51:void Cstradd( cstring ** self, char * str )
        -:   52:{
       39:   53:    cstring * s2 = InitCstring( str );
       39:   54:    snode * cur = (*self)->first;
        -:   55:
       39:   56:    if ( cur == NULL )
        -:   57:    {
    #####:   58:        SetCstring( self, s2 );
    #####:   59:        return ;
        -:   60:    }
     1617:   61:    while ( cur->next != NULL )
      789:   62:        cur = cur->next;
       39:   63:    cur->next = s2->first;
       39:   64:    (*self)->count += s2->count;
        -:   65:}
        -:   66:
        6:   67:void FreeCstring( cstring ** str )
        -:   68:{
        6:   69:    snode * sptr = NULL;
        6:   70:    snode * next = NULL;
        -:   71:
        6:   72:    if ( str != NULL )
        6:   73:        if ( (*str) != NULL )
        -:   74:        {
        6:   75:            sptr = (*str)->first;
      518:   76:            while ( sptr != NULL )
        -:   77:            {
      256:   78:                next = sptr->next;
      256:   79:                FreeSnode(sptr);
      256:   80:                sptr = next;
        -:   81:            }
        6:   82:            free( (*str) );
        6:   83:            (*str) = NULL;
        -:   84:        }
        6:   85:    return ;
        -:   86:}
        -:   87:
        1:   88:void SetCstring( cstring ** target, cstring * source )
        -:   89:{
        1:   90:    snode * sptr = NULL;
        1:   91:    snode * tptr = NULL;
        1:   92:    snode * cur = NULL;
        -:   93:
        1:   94:    sptr = source->first;
        1:   95:    if ( sptr == NULL || !Cstrcmp( *target, source ) )
    #####:   96:        return ;
        1:   97:    FreeCstring( target );
        1:   98:    *target = InitCstring( NULL );
        1:   99:    cur = InitSnode(sptr->ch);
        1:  100:    (*target)->first = cur;
        3:  101:    for ( sptr = sptr->next; sptr != NULL; sptr = sptr->next )
        -:  102:    {
        2:  103:        tptr = InitSnode(sptr->ch);
        2:  104:        cur->next = tptr;
        2:  105:        cur = tptr;
        -:  106:    }
        1:  107:    (*target)->count += source->count;
        -:  108:}
        -:  109:
        2:  110:int Cstrcmp( cstring * s1, cstring * s2 )
        -:  111:{
        2:  112:    snode * s1ptr = s1->first;
        2:  113:    snode * s2ptr = s2->first;
        -:  114:
        2:  115:    if ( s1->count != s2->count )
        1:  116:        return -1;
        5:  117:    while ( s1ptr != NULL )
        -:  118:    {
        3:  119:        if ( s1ptr->ch != s2ptr->ch )
        1:  120:            return s1ptr->ch - s2ptr->ch;
        2:  121:        s1ptr = s1ptr->next;
        2:  122:        s2ptr = s2ptr->next;
        -:  123:    }
    #####:  124:    return 0;
        -:  125:}
        -:  126:
        1:  127:void Cstrcat( cstring * s1, cstring * s2 )
        -:  128:{
        1:  129:    snode * cur = s1->first;
        -:  130:
        1:  131:    if ( cur == NULL )
        -:  132:    {
    #####:  133:        SetCstring( &s1, s2 );
    #####:  134:        return ;
        -:  135:    }
       15:  136:    while ( cur->next != NULL )
        7:  137:        cur = cur->next;
        1:  138:    cur->next = s2->first;
        1:  139:    s1->count += s2->count;
        -:  140:}
        -:  141:
        1:  142:void Cstrcon( cstring ** s1, cstring * s2 )
        -:  143:{
        1:  144:    cstring * temp = NULL;
        -:  145:
        1:  146:    temp = InitCstring( CstrtoStr( s2 ) );
        1:  147:    Cstrcat( *s1, temp );
        1:  148:}
        -:  149:
       17:  150:char * CstrtoStr( cstring * s )
        -:  151:{
       17:  152:    snode * cur = s->first;
       17:  153:    int i = 0;
       17:  154:    int count = s->count;
       17:  155:    char * string = malloc( sizeof(char) * (count + 1) );
        -:  156:
      312:  157:    for ( i = 0; i < count; i++ )
        -:  158:    {
      295:  159:        string[i] = cur->ch;
      295:  160:        cur = cur->next;
        -:  161:    }
       17:  162:    string[i] = '\0';
        -:  163:
       17:  164:    return string;
        -:  165:}
        -:  166:
        7:  167:char * NumtoStr( float num )
        -:  168:{
        7:  169:    char * str = malloc( sizeof(char) * 25 );
        -:  170:
        7:  171:    sprintf( str, "%.5f", num );
        -:  172:
        7:  173:    return str;
        -:  174:}
        -:  175:
    #####:  176:snode * Cstrdel( cstring * s, int place )
        -:  177:{
    #####:  178:    snode * cur = NULL;
    #####:  179:    int length = -1;
    #####:  180:    int i = 1;
    #####:  181:    snode * tmpNode = NULL;
        -:  182:
    #####:  183:    if ( s == NULL )
    #####:  184:        return NULL;
        -:  185:
    #####:  186:    cur = s->first;
    #####:  187:    length = s->count;
    #####:  188:    if ( cur == NULL )
    #####:  189:        return NULL;
    #####:  190:    if ( length < place )
    #####:  191:        return NULL;
        -:  192:
    #####:  193:    if ( place == 1 )
        -:  194:    {
    #####:  195:        tmpNode = cur->next;
    #####:  196:        cur->next = NULL;
    #####:  197:        s->first = tmpNode;
    #####:  198:        s->count -= 1;
    #####:  199:        return cur;
        -:  200:    }
    #####:  201:    while ( i + 1 < place )
        -:  202:    {
    #####:  203:        cur = cur->next;
    #####:  204:        i++;
        -:  205:    }
    #####:  206:    tmpNode = cur->next;
    #####:  207:    cur->next = tmpNode->next;
    #####:  208:    tmpNode->next = NULL;
    #####:  209:    s->count -= 1;
    #####:  210:    return tmpNode;
        -:  211:}
