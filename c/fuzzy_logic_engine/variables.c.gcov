        -:    0:Source:variables.c
        -:    0:Programs:7
        -:    1:#include <stdlib.h>
        -:    2:#include <math.h>
        -:    3:#include "clist.h"
        -:    4:#include "cdict.h"
        -:    5:#include "cstring.h"
        -:    6:#include "variables.h"
        -:    7:
        -:    8:#define ABS(x) ((x)>0?(x):(-(x)))
        -:    9:
    #####:   10:Fuzzyset * InitFuzzyset( clist * values, char * name  )
        -:   11:{
    #####:   12:    Fuzzyset * self = malloc( sizeof(Fuzzyset) );
    #####:   13:    self->values = values;
        -:   14:
    #####:   15:    char * source = name;
        -:   16:
    #####:   17:    cstring * str = NULL;
    #####:   18:    int i = 0;
    #####:   19:    snode * sptr = NULL;
    #####:   20:    snode * cur = NULL;
        -:   21:
    #####:   22:    str = malloc( sizeof(cstring) );
    #####:   23:    if ( source == NULL )
        -:   24:    {
    #####:   25:        str->first = NULL;
    #####:   26:        str->count = 0;
        -:   27:    }
        -:   28:    else
        -:   29:    {
    #####:   30:        sptr = InitSnode(source[0]);
    #####:   31:        str->first = cur = sptr;
    #####:   32:        for ( i = 1; source[i] != '\0'; i++ )
        -:   33:        {
    #####:   34:            sptr = InitSnode(source[i]);
    #####:   35:            cur->next = sptr;
    #####:   36:            cur = sptr;
        -:   37:        }
    #####:   38:        str->count = i;
        -:   39:    }
        -:   40:
    #####:   41:    self->name = str;
        -:   42:
    #####:   43:    return self;
        -:   44:}
        -:   45:
    #####:   46:void FreeFuzzyset( Fuzzyset * self )
        -:   47:{
    #####:   48:    if ( self != NULL )
        -:   49:    {
    #####:   50:        FreeCstring( &(self->name) );
    #####:   51:        FreeClist( self->values );
    #####:   52:        free( self );
    #####:   53:        self = NULL;
        -:   54:    }
    #####:   55:    return ;
        -:   56:}
        -:   57:
    #####:   58:cdict * getDictOfFuzzyset( Fuzzyset * self )
        -:   59:{
    #####:   60:    dnode * dptr = InitDnode();
    #####:   61:    cdict * dict = InitCdict();
        -:   62:
    #####:   63:    char * source = CstrtoStr(self->name);
        -:   64:
    #####:   65:    cstring * str = NULL;
    #####:   66:    int i = 0;
    #####:   67:    snode * sptr = NULL;
    #####:   68:    snode * cur = NULL;
        -:   69:
    #####:   70:    str = malloc( sizeof(cstring) );
    #####:   71:    if ( source == NULL )
        -:   72:    {
    #####:   73:        str->first = NULL;
    #####:   74:        str->count = 0;
        -:   75:    }
        -:   76:    else
        -:   77:    {
    #####:   78:        sptr = InitSnode(source[0]);
    #####:   79:        str->first = cur = sptr;
    #####:   80:        for ( i = 1; source[i] != '\0'; i++ )
        -:   81:        {
    #####:   82:            sptr = InitSnode(source[i]);
    #####:   83:            cur->next = sptr;
    #####:   84:            cur = sptr;
        -:   85:        }
    #####:   86:        str->count = i;
        -:   87:    }
        -:   88:
    #####:   89:    cstring * name = str;
        -:   90:
    #####:   91:    clist * List = InitClist( NULL, 0 );
        -:   92:
    #####:   93:    SetClist( &List, self->values );
    #####:   94:    SetDnodeValues( dptr, name, List );
    #####:   95:    AddDnode( dict, dptr );
        -:   96:
    #####:   97:    return dict;
        -:   98:}
        -:   99:
        1:  100:TriangularFuzzyset * InitTriangularFuzzyset( clist * values, char * name )
        -:  101:{
        1:  102:    TriangularFuzzyset * self = malloc( sizeof(TriangularFuzzyset) );
        -:  103:
        1:  104:    char * source =  "TRIANGULAR";
        -:  105:
        1:  106:    cstring * str = NULL;
        1:  107:    int i = 0;
        1:  108:    snode * sptr = NULL;
        1:  109:    snode * cur = NULL;
        -:  110:
        1:  111:    str = malloc( sizeof(cstring) );
        1:  112:    if ( source == NULL )
        -:  113:    {
    #####:  114:        str->first = NULL;
    #####:  115:        str->count = 0;
        -:  116:    }
        -:  117:    else
        -:  118:    {
        1:  119:        sptr = InitSnode(source[0]);
        1:  120:        str->first = cur = sptr;
       10:  121:        for ( i = 1; source[i] != '\0'; i++ )
        -:  122:        {
        9:  123:            sptr = InitSnode(source[i]);
        9:  124:            cur->next = sptr;
        9:  125:            cur = sptr;
        -:  126:        }
        1:  127:        str->count = i;
        -:  128:    }
        -:  129:
        1:  130:    self->shape = str;
        -:  131:
        1:  132:    self->values = values;
        -:  133:
        1:  134:    self->name = InitCstring(name);
        -:  135:
        1:  136:    return self;
        -:  137:}
        -:  138:
    #####:  139:void FreeTriangularFuzzyset( TriangularFuzzyset * self )
        -:  140:{
    #####:  141:    if ( self != NULL )
        -:  142:    {
    #####:  143:        FreeCstring( &(self->name) );
    #####:  144:        FreeCstring( &(self->shape) );
    #####:  145:        FreeClist( self->values );
    #####:  146:        free( self );
    #####:  147:        self = NULL;
        -:  148:    }
    #####:  149:    return ;
        -:  150:}
        -:  151:
    #####:  152:char * __str__TriangularFuzzyset( TriangularFuzzyset * self )
        -:  153:{
    #####:  154:    cstring * string = NULL;
    #####:  155:    clist * values = self->values;
    #####:  156:    inode * node = values->first;
    #####:  157:    int i = 0;
    #####:  158:    char * numStr = NumtoStr( node->number );
    #####:  159:    char * TriangularFuzzysetStr = NULL;
        -:  160:
    #####:  161:    char * source = CstrtoStr(self->name);
        -:  162:
    #####:  163:    cstring * str = NULL;
    #####:  164:    i = 0;
    #####:  165:    snode * sptr = NULL;
    #####:  166:    snode * cur = NULL;
        -:  167:
    #####:  168:    str = malloc( sizeof(cstring) );
    #####:  169:    if ( source == NULL )
        -:  170:    {
    #####:  171:        str->first = NULL;
    #####:  172:        str->count = 0;
        -:  173:    }
        -:  174:    else
        -:  175:    {
    #####:  176:        sptr = InitSnode(source[0]);
    #####:  177:        str->first = cur = sptr;
    #####:  178:        for ( i = 1; source[i] != '\0'; i++ )
        -:  179:        {
    #####:  180:            sptr = InitSnode(source[i]);
    #####:  181:            cur->next = sptr;
    #####:  182:            cur = sptr;
        -:  183:        }
    #####:  184:        str->count = i;
        -:  185:    }
        -:  186:
    #####:  187:    string = str;
        -:  188:
    #####:  189:    Cstradd( &string, " - " );
    #####:  190:    Cstrcon( &string, self->shape );
    #####:  191:    Cstradd( &string, ":\t" );
    #####:  192:    for ( i = 0; i < 3; i++ )
        -:  193:    {
    #####:  194:        Cstradd( &string, " " );
    #####:  195:        Cstradd( &string, numStr );
    #####:  196:        Cstradd( &string, "\t|" );
    #####:  197:        node = node->next;
        -:  198:    }
        -:  199:
    #####:  200:    TriangularFuzzysetStr = CstrtoStr( string );
    #####:  201:    return TriangularFuzzysetStr;
        -:  202:}
        -:  203:
        1:  204:cdict * getDictOfTriangularFuzzyset( TriangularFuzzyset * self )
        -:  205:{
        1:  206:    cdict * dict = InitCdict();
        1:  207:    dnode * dptr = InitDnode();
        -:  208:
        1:  209:    char * source = CstrtoStr(self->name);
        -:  210:
        1:  211:    cstring * str = NULL;
        1:  212:    int i = 0;
        1:  213:    snode * sptr = NULL;
        1:  214:    snode * cur = NULL;
        -:  215:
        1:  216:    str = malloc( sizeof(cstring) );
        1:  217:    if ( source == NULL )
        -:  218:    {
    #####:  219:        str->first = NULL;
    #####:  220:        str->count = 0;
        -:  221:    }
        -:  222:    else
        -:  223:    {
        1:  224:        sptr = InitSnode(source[0]);
        1:  225:        str->first = cur = sptr;
        3:  226:        for ( i = 1; source[i] != '\0'; i++ )
        -:  227:        {
        2:  228:            sptr = InitSnode(source[i]);
        2:  229:            cur->next = sptr;
        2:  230:            cur = sptr;
        -:  231:        }
        1:  232:        str->count = i;
        -:  233:    }
        -:  234:
        1:  235:    cstring * name = str;
        -:  236:
        1:  237:    clist * List = InitClist( NULL, 0 );
        -:  238:
        1:  239:    SetClist( &List, self->values );
        1:  240:    SetDnodeValues( dptr, name, List );
        1:  241:    AddDnode( dict, dptr );
        -:  242:
        1:  243:    return dict;
        -:  244:}
        -:  245:
    #####:  246:float degreeOfTriangularFuzzyset( TriangularFuzzyset * self, float crisp )
        -:  247:{
    #####:  248:    float c = crisp;
    #####:  249:    clist * values = self->values;
    #####:  250:    inode * cur = values->first;
    #####:  251:    float v0 = 0;
    #####:  252:    float v1 = 0;
    #####:  253:    float v2 = 0;
        -:  254:
    #####:  255:    v0 = cur->number;
    #####:  256:    cur = cur->next;
    #####:  257:    v1 = cur->number;
    #####:  258:    cur = cur->next;
    #####:  259:    v2 = cur->number;
        -:  260:
    #####:  261:    if ( c < v0 )
    #####:  262:        c = v0;
    #####:  263:    else if ( c > v2 )
    #####:  264:        c = v2;
        -:  265:
    #####:  266:    if ( c == v1 )
    #####:  267:        return 1;
    #####:  268:    else if ( c == v0 )
    #####:  269:        return 0;
    #####:  270:    else if ( c == v2 )
    #####:  271:        return 0;
    #####:  272:    else if ( c > v0 && c < v2 )
    #####:  273:        return ( c - v0 ) / ( v1 - v0 );
        -:  274:    else
    #####:  275:        return ABS( (v2 - c) / ( v1 - v2 ) );
        -:  276:}
        -:  277:
    #####:  278:float center_of_gravity_OfTriangularFuzzyset( TriangularFuzzyset * self, float degree )
        -:  279:{
    #####:  280:    clist * values = self->values;
    #####:  281:    inode * cur = values->first;
    #####:  282:    float v0 = 0;
    #####:  283:    float v1 = 0;
    #####:  284:    float v2 = 0;
    #####:  285:    float x1 = 0;
    #####:  286:    float x2 = 0;
    #####:  287:    float sum = 0;
    #####:  288:    float center_of_gravity = 0;
        -:  289:
    #####:  290:    v0 = cur->number;
    #####:  291:    cur = cur->next;
    #####:  292:    v1 = cur->number;
    #####:  293:    cur = cur->next;
    #####:  294:    v2 = cur->number;
        -:  295:
    #####:  296:    x1 = v0 - degree * ( v0 - v1 );
    #####:  297:    x2 = v2 - degree * ( v2 - v1 );
        -:  298:
    #####:  299:    sum = v0 + x1 + x2 + v2;
    #####:  300:    center_of_gravity = sum / 4.0;
        -:  301:
    #####:  302:    return center_of_gravity;
        -:  303:}
        -:  304:
    #####:  305:float areaOfTriangularFuzzyset( TriangularFuzzyset * self, float degree )
        -:  306:{
    #####:  307:    clist * values = self->values;
    #####:  308:    inode * cur = values->first;
    #####:  309:    float v0 = 0;
    #####:  310:    float v1 = 0;
    #####:  311:    float v2 = 0;
    #####:  312:    float x1 = 0;
    #####:  313:    float x2 = 0;
    #####:  314:    float b1 = 0;
    #####:  315:    float b2 = 0;
    #####:  316:    float sum = 0;
    #####:  317:    float area = 0;
        -:  318:
    #####:  319:    v0 = cur->number;
    #####:  320:    cur = cur->next;
    #####:  321:    v1 = cur->number;
    #####:  322:    cur = cur->next;
    #####:  323:    v2 = cur->number;
        -:  324:
    #####:  325:    if ( degree == 1.0 )
    #####:  326:        return (v2 - v0) * 0.5;
    #####:  327:    x1 = v0 - degree * ( v0 - v1 );
    #####:  328:    x2 = v2 - degree * ( v2 - v1 );
    #####:  329:    b1 = v2 - v0;
    #####:  330:    b2 = x2 - x1;
        -:  331:
    #####:  332:    sum = b1 + b2;
    #####:  333:    area = sum * degree * 0.5;
        -:  334:
    #####:  335:    return area;
        -:  336:}
        -:  337:
        1:  338:TrapezioidalFuzzyset * InitTrapezioidalFuzzyset( clist * values, char * name )
        -:  339:{
        1:  340:    int orderCount = 4;
        -:  341:
        1:  342:    TrapezioidalFuzzyset * self = malloc( sizeof(TrapezioidalFuzzyset) );
        -:  343:
        1:  344:    char * source = name;
        -:  345:
        1:  346:    cstring * str = NULL;
        1:  347:    int i = 0;
        1:  348:    snode * sptr = NULL;
        1:  349:    snode * cur = NULL;
        -:  350:
        1:  351:    str = malloc( sizeof(cstring) );
        1:  352:    if ( source == NULL )
        -:  353:    {
    #####:  354:        str->first = NULL;
    #####:  355:        str->count = 0;
        -:  356:    }
        -:  357:    else
        -:  358:    {
        1:  359:        sptr = InitSnode(source[0]);
        1:  360:        str->first = cur = sptr;
        3:  361:        for ( i = 1; source[i] != '\0'; i++ )
        -:  362:        {
        2:  363:            sptr = InitSnode(source[i]);
        2:  364:            cur->next = sptr;
        2:  365:            cur = sptr;
        -:  366:        }
        1:  367:        str->count = i;
        -:  368:    }
        -:  369:
        1:  370:    self->name = str;
        -:  371:
        1:  372:    self->shape = InitCstring( "TRAPEZIOIDAL" );
        1:  373:    if ( values->count == orderCount )
        -:  374:    {
        1:  375:        SetClist( &(self->values), values );
        -:  376:
        1:  377:        int count = self->values->count;
        1:  378:        inode * i1 = NULL;
        1:  379:        inode * i2 = NULL;
        1:  380:        inode * i3 = NULL;
        1:  381:        inode * i4 = NULL;
        1:  382:        i = 0;
        1:  383:        int j = 0;
        1:  384:        int k = 0;
        1:  385:        float temp = 0;
        1:  386:        float array[4] = { 0, 0, 0, 0 };
        1:  387:        int maxi = 3;
        1:  388:        int maxj = 4;
        -:  389:
        1:  390:        switch ( count )
        -:  391:        {
    #####:  392:        case 2:
    #####:  393:            i1 = self->values->first;
    #####:  394:            i2 = i1->next;
    #####:  395:            if ( i1->number > i2->number )
        -:  396:            {
    #####:  397:                temp = i1->number;
    #####:  398:                i1->number = i2->number;
    #####:  399:                i2->number = temp;
        -:  400:            }
    #####:  401:            break;
    #####:  402:        case 3:
    #####:  403:            i1 = self->values->first;
    #####:  404:            i2 = i1->next;
    #####:  405:            i3 = i2->next;
    #####:  406:            if ( i1->number > i2->number )
        -:  407:            {
    #####:  408:                temp = i1->number;
    #####:  409:                i1->number = i2->number;
    #####:  410:                i2->number = temp;
        -:  411:            }
    #####:  412:            if ( i1->number > i3->number )
        -:  413:            {
    #####:  414:                temp = i1->number;
    #####:  415:                i1->number = i3->number;
    #####:  416:                i3->number = temp;
        -:  417:            }
    #####:  418:            if ( i2->number > i3->number )
        -:  419:            {
    #####:  420:                temp = i2->number;
    #####:  421:                i2->number = i3->number;
    #####:  422:                i3->number = temp;
        -:  423:            }
    #####:  424:            break;
        1:  425:        case 4:
        1:  426:            i1 = self->values->first;
        1:  427:            i2 = i1->next;
        1:  428:            i3 = i2->next;
        1:  429:            i4 = i3->next;
        1:  430:            array[0] = i1->number;
        1:  431:            array[1] = i2->number;
        1:  432:            array[2] = i3->number;
        1:  433:            array[3] = i4->number;
        4:  434:            for ( i = 0; i < maxi; i++ )
        -:  435:            {
        3:  436:                k = i;
        3:  437:                temp = array[i];
       12:  438:                for ( j = i; j < maxj; j++ )
        9:  439:                    if ( temp > array[j] )
        -:  440:                    {
    #####:  441:                        temp = array[j];
    #####:  442:                        k = j;
        -:  443:                    }
        3:  444:                array[k] = array[i];
        3:  445:                array[i] = temp;
        3:  446:                i1->number = array[0];
        3:  447:                i2->number = array[1];
        3:  448:                i3->number = array[2];
        3:  449:                i4->number = array[3];
        -:  450:            }
        1:  451:            break;
    #####:  452:        default:
    #####:  453:            exit(0);
        -:  454:        }
        -:  455:    }
        1:  456:    return self;
        -:  457:}
        -:  458:
    #####:  459:void FreeTrapezioidalFuzzyset( TrapezioidalFuzzyset * self )
        -:  460:{
    #####:  461:    if ( self != NULL )
        -:  462:    {
    #####:  463:        FreeCstring( &(self->name) );
    #####:  464:        FreeCstring( &(self->shape) );
    #####:  465:        FreeClist( self->values );
    #####:  466:        free( self );
    #####:  467:        self = NULL;
        -:  468:    }
    #####:  469:    return ;
        -:  470:}
        -:  471:
    #####:  472:char * __str__TrapezioidalFuzzyset( TrapezioidalFuzzyset * self )
        -:  473:{
    #####:  474:    cstring * string = NULL;
    #####:  475:    clist * values = self->values;
    #####:  476:    inode * node = values->first;
    #####:  477:    int i = 0;
    #####:  478:    int orderCount = 4;
    #####:  479:    char * numStr = NULL;
    #####:  480:    char * TrapezioidalFuzzysetStr = NULL;
        -:  481:
    #####:  482:    char * source = CstrtoStr(self->name);
        -:  483:
    #####:  484:    cstring * str = NULL;
    #####:  485:    i = 0;
    #####:  486:    snode * sptr = NULL;
    #####:  487:    snode * cur = NULL;
        -:  488:
    #####:  489:    str = malloc( sizeof(cstring) );
    #####:  490:    if ( source == NULL )
        -:  491:    {
    #####:  492:        str->first = NULL;
    #####:  493:        str->count = 0;
        -:  494:    }
        -:  495:    else
        -:  496:    {
    #####:  497:        sptr = InitSnode(source[0]);
    #####:  498:        str->first = cur = sptr;
    #####:  499:        for ( i = 1; source[i] != '\0'; i++ )
        -:  500:        {
    #####:  501:            sptr = InitSnode(source[i]);
    #####:  502:            cur->next = sptr;
    #####:  503:            cur = sptr;
        -:  504:        }
    #####:  505:        str->count = i;
        -:  506:    }
        -:  507:
    #####:  508:    string = str;
        -:  509:
    #####:  510:    Cstradd( &string, " - " );
    #####:  511:    Cstrcon( &string, self->shape );
    #####:  512:    Cstradd( &string, ":\t" );
    #####:  513:    for ( i = 0; i < orderCount; i++ )
        -:  514:    {
    #####:  515:        Cstradd( &string, " " );
    #####:  516:        numStr = NumtoStr( node->number );
    #####:  517:        Cstradd( &string, numStr );
    #####:  518:        Cstradd( &string, "\t|" );
    #####:  519:        node = node->next;
        -:  520:    }
        -:  521:
    #####:  522:    TrapezioidalFuzzysetStr = CstrtoStr( string );
    #####:  523:    return TrapezioidalFuzzysetStr;
        -:  524:}
        -:  525:
        1:  526:cdict * getDictOfTrapezioidalFuzzyset( TrapezioidalFuzzyset * self )
        -:  527:{
        1:  528:    dnode * dptr = InitDnode();
        1:  529:    cdict * dict = InitCdict();
        -:  530:
        1:  531:    char * source = NULL;
        -:  532:
        1:  533:    cstring * str = NULL;
        1:  534:    int i = 0;
        1:  535:    snode * sptr = NULL;
        1:  536:    snode * cur = NULL;
        -:  537:
        1:  538:    str = malloc( sizeof(cstring) );
        1:  539:    if ( source == NULL )
        -:  540:    {
        1:  541:        str->first = NULL;
        1:  542:        str->count = 0;
        -:  543:    }
        -:  544:    else
        -:  545:    {
    #####:  546:        sptr = InitSnode(source[0]);
    #####:  547:        str->first = cur = sptr;
    #####:  548:        for ( i = 1; source[i] != '\0'; i++ )
        -:  549:        {
    #####:  550:            sptr = InitSnode(source[i]);
    #####:  551:            cur->next = sptr;
    #####:  552:            cur = sptr;
        -:  553:        }
    #####:  554:        str->count = i;
        -:  555:    }
        -:  556:
        1:  557:    cstring * name = str;
        -:  558:
        1:  559:    clist * List = InitClist(NULL, 0);
        -:  560:
        1:  561:    SetCstring( &name, self->name );
        1:  562:    SetClist( &List, self->values );
        1:  563:    SetDnodeValues( dptr, name, List );
        1:  564:    AddDnode( dict, dptr );
        1:  565:    return dict;
        -:  566:}
        -:  567:
    #####:  568:float degreeOfTrapezioidalFuzzyset( TrapezioidalFuzzyset * self, float crisp )
        -:  569:{
    #####:  570:    float c = crisp;
    #####:  571:    clist * values = self->values;
    #####:  572:    inode * cur = values->first;
    #####:  573:    float v0 = 0;
    #####:  574:    float v1 = 0;
    #####:  575:    float v2 = 0;
    #####:  576:    float v3 = 0;
        -:  577:
    #####:  578:    v0 = cur->number;
    #####:  579:    cur = cur->next;
    #####:  580:    v1 = cur->number;
    #####:  581:    cur = cur->next;
    #####:  582:    v2 = cur->number;
    #####:  583:    cur = cur->next;
    #####:  584:    v3 = cur->number;
        -:  585:
    #####:  586:    if ( c < v0 )
    #####:  587:        c = v0;
    #####:  588:    else if ( c > v3 )
    #####:  589:        c = v3;
        -:  590:
    #####:  591:    if ( v1 <= c && c <= v2 )
    #####:  592:        return 1;
    #####:  593:    else if ( c == v0 )
    #####:  594:        return 0;
    #####:  595:    else if ( c == v3 )
    #####:  596:        return 0;
    #####:  597:    else if ( c < v1 )
    #####:  598:        return ( c - v0 ) / ( v1 - v0 );
        -:  599:    else
    #####:  600:        return ABS( ( v3 - c ) / ( v2 - v3 ) );
        -:  601:}
        -:  602:
    #####:  603:float center_of_gravity_OfTrapezioidalFuzzyset( TrapezioidalFuzzyset * self, float degree )
        -:  604:{
    #####:  605:    clist * values = self->values;
    #####:  606:    inode * cur = values->first;
    #####:  607:    float v0 = 0;
    #####:  608:    float v1 = 0;
    #####:  609:    float v2 = 0;
    #####:  610:    float v3 = 0;
    #####:  611:    float x1 = 0;
    #####:  612:    float x2 = 0;
    #####:  613:    float sum = 0;
    #####:  614:    float center_of_gravity = 0;
        -:  615:
    #####:  616:    v0 = cur->number;
    #####:  617:    cur = cur->next;
    #####:  618:    v1 = cur->number;
    #####:  619:    cur = cur->next;
    #####:  620:    v2 = cur->number;
    #####:  621:    cur = cur->next;
    #####:  622:    v3 = cur->number;
        -:  623:
    #####:  624:    x1 = v0 - degree * ( v0 - v1 );
    #####:  625:    x2 = v3 - degree * ( v3 - v2 );
        -:  626:
    #####:  627:    sum = v0 + x1 + x2 + v3;
    #####:  628:    center_of_gravity = sum / 4.0;
        -:  629:
    #####:  630:    return center_of_gravity;
        -:  631:}
        -:  632:
    #####:  633:float areaOfTrapezioidalFuzzyset( TrapezioidalFuzzyset * self, float degree )
        -:  634:{
    #####:  635:    clist * values = self->values;
    #####:  636:    inode * cur = values->first;
    #####:  637:    float v0 = 0;
    #####:  638:    float v1 = 0;
    #####:  639:    float v2 = 0;
    #####:  640:    float v3 = 0;
    #####:  641:    float x1 = 0;
    #####:  642:    float x2 = 0;
    #####:  643:    float b1 = 0;
    #####:  644:    float b2 = 0;
    #####:  645:    float sum = 0;
    #####:  646:    float area = 0;
        -:  647:
    #####:  648:    v0 = cur->number;
    #####:  649:    cur = cur->next;
    #####:  650:    v1 = cur->number;
    #####:  651:    cur = cur->next;
    #####:  652:    v2 = cur->number;
    #####:  653:    cur = cur->next;
    #####:  654:    v3 = cur->number;
        -:  655:
    #####:  656:    if ( degree == 1.0 )
        -:  657:    {
    #####:  658:        b1 = v3 - v0;
    #####:  659:        b2 = v2 - v1;
        -:  660:    }
        -:  661:    else
        -:  662:    {
    #####:  663:        x1 = v0 - degree * ( v0 - v1 );
    #####:  664:        x2 = v3 - degree * ( v3 - v2 );
    #####:  665:        b1 = v3 - v0;
    #####:  666:        b2 = x2 - x1;
        -:  667:    }
        -:  668:
    #####:  669:    sum = b1 + b2;
    #####:  670:    area = sum * degree * 0.5;
        -:  671:
    #####:  672:    return area;
        -:  673:}
        -:  674:
    #####:  675:GaussianFuzzySet * InitGaussianFuzzySet( clist * values, char * name )
        -:  676:{
    #####:  677:    int orderCount = 2;
    #####:  678:    inode * firstNode = NULL;
    #####:  679:    inode * secondNode = NULL;
        -:  680:
    #####:  681:    GaussianFuzzySet * self = malloc( sizeof(GaussianFuzzySet) );
        -:  682:
    #####:  683:    char * source = name;
        -:  684:
    #####:  685:    cstring * str = NULL;
    #####:  686:    int i = 0;
    #####:  687:    snode * sptr = NULL;
    #####:  688:    snode * cur = NULL;
        -:  689:
    #####:  690:    str = malloc( sizeof(cstring) );
    #####:  691:    if ( source == NULL )
        -:  692:    {
    #####:  693:        str->first = NULL;
    #####:  694:        str->count = 0;
        -:  695:    }
        -:  696:    else
        -:  697:    {
    #####:  698:        sptr = InitSnode(source[0]);
    #####:  699:        str->first = cur = sptr;
    #####:  700:        for ( i = 1; source[i] != '\0'; i++ )
        -:  701:        {
    #####:  702:            sptr = InitSnode(source[i]);
    #####:  703:            cur->next = sptr;
    #####:  704:            cur = sptr;
        -:  705:        }
    #####:  706:        str->count = i;
        -:  707:    }
        -:  708:
    #####:  709:    self->name = str;
        -:  710:
    #####:  711:    self->shape = InitCstring( "GAUSSIAN" );
    #####:  712:    if ( values->count == orderCount )
        -:  713:    {
    #####:  714:        firstNode = values->first;
    #####:  715:        secondNode = firstNode->next;
    #####:  716:        self->average = firstNode->number;
    #####:  717:        self->variance = secondNode->number;
        -:  718:    }
    #####:  719:    return self;
        -:  720:}
        -:  721:
    #####:  722:void FreeGaussianFuzzyset( GaussianFuzzySet * self )
        -:  723:{
    #####:  724:    if ( self != NULL )
        -:  725:    {
    #####:  726:        FreeCstring( &(self->name) );
    #####:  727:        FreeCstring( &(self->shape) );
    #####:  728:        free( self );
    #####:  729:        self = NULL;
        -:  730:    }
    #####:  731:    return ;
        -:  732:}
        -:  733:
    #####:  734:char * __str__GaussianFuzzySet( GaussianFuzzySet * self )
        -:  735:{
    #####:  736:    cstring * string = NULL;
    #####:  737:    char * averageStr = NULL;
    #####:  738:    char * varianceStr = NULL;
    #####:  739:    char * GaussianFuzzySetStr = NULL;
        -:  740:
    #####:  741:    char * source = CstrtoStr(self->name);
        -:  742:
    #####:  743:    cstring * str = NULL;
    #####:  744:    int i = 0;
    #####:  745:    snode * sptr = NULL;
    #####:  746:    snode * cur = NULL;
        -:  747:
    #####:  748:    str = malloc( sizeof(cstring) );
    #####:  749:    if ( source == NULL )
        -:  750:    {
    #####:  751:        str->first = NULL;
    #####:  752:        str->count = 0;
        -:  753:    }
        -:  754:    else
        -:  755:    {
    #####:  756:        sptr = InitSnode(source[0]);
    #####:  757:        str->first = cur = sptr;
    #####:  758:        for ( i = 1; source[i] != '\0'; i++ )
        -:  759:        {
    #####:  760:            sptr = InitSnode(source[i]);
    #####:  761:            cur->next = sptr;
    #####:  762:            cur = sptr;
        -:  763:        }
    #####:  764:        str->count = i;
        -:  765:    }
        -:  766:
    #####:  767:    string = str;
        -:  768:
    #####:  769:    Cstradd( &string, " - " );
    #####:  770:    Cstrcon( &string, self->shape );
    #####:  771:    Cstradd( &string, ":\t" );
        -:  772:
    #####:  773:    Cstradd( &string, " " );
    #####:  774:    averageStr = NumtoStr(self->average);
    #####:  775:    Cstradd( &string, averageStr );
    #####:  776:    Cstradd( &string, "\t|" );
        -:  777:
    #####:  778:    Cstradd( &string, " " );
    #####:  779:    varianceStr = NumtoStr(self->variance);
    #####:  780:    Cstradd( &string, varianceStr );
    #####:  781:    Cstradd( &string, "\t|" );
        -:  782:
    #####:  783:    GaussianFuzzySetStr = CstrtoStr( string );
    #####:  784:    return GaussianFuzzySetStr;
        -:  785:}
        -:  786:
    #####:  787:cdict * getDictOfGaussianFuzzySet( GaussianFuzzySet * self )
        -:  788:{
    #####:  789:    dnode * dptr = InitDnode();
    #####:  790:    cdict * dict = InitCdict();
        -:  791:
    #####:  792:    char * source = NULL;
        -:  793:
    #####:  794:    cstring * str = NULL;
    #####:  795:    int i = 0;
    #####:  796:    snode * sptr = NULL;
    #####:  797:    snode * cur = NULL;
        -:  798:
    #####:  799:    str = malloc( sizeof(cstring) );
    #####:  800:    if ( source == NULL )
        -:  801:    {
    #####:  802:        str->first = NULL;
    #####:  803:        str->count = 0;
        -:  804:    }
        -:  805:    else
        -:  806:    {
    #####:  807:        sptr = InitSnode(source[0]);
    #####:  808:        str->first = cur = sptr;
    #####:  809:        for ( i = 1; source[i] != '\0'; i++ )
        -:  810:        {
    #####:  811:            sptr = InitSnode(source[i]);
    #####:  812:            cur->next = sptr;
    #####:  813:            cur = sptr;
        -:  814:        }
    #####:  815:        str->count = i;
        -:  816:    }
        -:  817:
    #####:  818:    cstring * name = str;
        -:  819:
    #####:  820:    float array[2] = { 0, 0 };
    #####:  821:    clist * values = NULL;
        -:  822:
    #####:  823:    SetCstring( &name, self->name );
    #####:  824:    array[0] = self->average;
    #####:  825:    array[1] = self->variance;
    #####:  826:    values = InitClist( array, 2 );
    #####:  827:    SetDnodeValues( dptr, name, values );
    #####:  828:    AddDnode( dict, dptr );
        -:  829:
    #####:  830:    return dict;
        -:  831:}
        -:  832:
    #####:  833:float degreeOfGaussianFuzzySet( GaussianFuzzySet * self, float crisp )
        -:  834:{
    #####:  835:    float x = crisp;
        -:  836:
    #####:  837:    return ((1.0/(sqrt(2*3.14159)*self->variance)) * pow(2.71828, ((-0.5)* pow(((x-self->average)/self->variance), 2))));
        -:  838:}
        -:  839:
        3:  840:fnode * InitFnode( void )
        -:  841:{
        3:  842:    fnode * self = malloc( sizeof(fnode) );
        3:  843:    self->fuzzy_set = NULL;
        3:  844:    self->triangular_fuzzy_set = NULL;
        3:  845:    self->trapezioidal_fuzzy_set = NULL;
        3:  846:    self->gaussian_fuzzy_set = NULL;
        3:  847:    self->name = NULL;
        3:  848:    self->next = NULL;
        3:  849:    return self;
        -:  850:}
        -:  851:
    #####:  852:void FlushFnode( fnode * self )
        -:  853:{
    #####:  854:    if ( self->fuzzy_set != NULL )
    #####:  855:        FreeFuzzyset( self->fuzzy_set );
    #####:  856:    self->fuzzy_set = NULL;
    #####:  857:    if ( self->triangular_fuzzy_set != NULL )
    #####:  858:        FreeTriangularFuzzyset( self->triangular_fuzzy_set );
    #####:  859:    self->triangular_fuzzy_set = NULL;
    #####:  860:    if ( self->trapezioidal_fuzzy_set != NULL )
    #####:  861:        FreeTrapezioidalFuzzyset( self->trapezioidal_fuzzy_set );
    #####:  862:    self->trapezioidal_fuzzy_set = NULL;
    #####:  863:    if ( self->gaussian_fuzzy_set != NULL )
    #####:  864:        FreeGaussianFuzzyset( self->gaussian_fuzzy_set );
    #####:  865:    self->gaussian_fuzzy_set = NULL;
    #####:  866:    if ( self->name != NULL )
    #####:  867:        FreeCstring( &(self->name) );
    #####:  868:    self->name = NULL;
    #####:  869:}
        -:  870:
    #####:  871:void FreeFnode( fnode * self )
        -:  872:{
    #####:  873:    if ( self != NULL )
        -:  874:    {
    #####:  875:        FreeFuzzyset( self->fuzzy_set );
    #####:  876:        FreeTriangularFuzzyset( self->triangular_fuzzy_set );
    #####:  877:        FreeTrapezioidalFuzzyset( self->trapezioidal_fuzzy_set );
    #####:  878:        FreeGaussianFuzzyset( self->gaussian_fuzzy_set );
    #####:  879:        FreeCstring( &(self->name) );
    #####:  880:        free( self );
    #####:  881:        self = NULL;
        -:  882:    }
    #####:  883:    return ;
        -:  884:}
        -:  885:
        1:  886:void SetFnodeTriangular( fnode * self, TriangularFuzzyset * triangular_fuzzy_set, cstring * name )
        -:  887:{
        1:  888:    self->triangular_fuzzy_set = triangular_fuzzy_set;
        1:  889:    self->name = name;
        1:  890:}
        -:  891:
        1:  892:void SetFnodeTrapezioidal( fnode * self, TrapezioidalFuzzyset * trapezioidal_fuzzy_set, cstring * name )
        -:  893:{
        1:  894:    self->trapezioidal_fuzzy_set = trapezioidal_fuzzy_set;
        1:  895:    self->name = name;
        1:  896:}
        -:  897:
    #####:  898:void SetFnodeGaussian( fnode * self, GaussianFuzzySet * gaussian_fuzzy_set, cstring * name )
        -:  899:{
    #####:  900:    self->gaussian_fuzzy_set = gaussian_fuzzy_set;
    #####:  901:    self->name = name;
    #####:  902:}
        -:  903:
    #####:  904:char * __str__Fnode( fnode * self )
        -:  905:{
    #####:  906:    if ( self->triangular_fuzzy_set != NULL )
    #####:  907:        return __str__TriangularFuzzyset( self->triangular_fuzzy_set );
    #####:  908:    if ( self->trapezioidal_fuzzy_set != NULL )
    #####:  909:        return __str__TrapezioidalFuzzyset( self->trapezioidal_fuzzy_set );
    #####:  910:    if ( self->gaussian_fuzzy_set != NULL )
    #####:  911:        return __str__GaussianFuzzySet( self->gaussian_fuzzy_set );
    #####:  912:    return NULL;
        -:  913:}
        -:  914:
    #####:  915:int __lt__( fnode * self, fnode * afnode )
        -:  916:{
    #####:  917:    float result1 = -1.0;
    #####:  918:    float result2 = -1.0;
        -:  919:
    #####:  920:    if ( self->triangular_fuzzy_set != NULL )
    #####:  921:        result1 = center_of_gravity_OfTriangularFuzzyset( self->triangular_fuzzy_set, 1 );
    #####:  922:    if ( self->trapezioidal_fuzzy_set != NULL )
    #####:  923:        result1 = center_of_gravity_OfTrapezioidalFuzzyset( self->trapezioidal_fuzzy_set, 1 );
    #####:  924:    if ( afnode->triangular_fuzzy_set != NULL )
    #####:  925:        result2 = center_of_gravity_OfTriangularFuzzyset( afnode->triangular_fuzzy_set, 1 );
    #####:  926:    if ( afnode->trapezioidal_fuzzy_set != NULL )
    #####:  927:        result2 = center_of_gravity_OfTrapezioidalFuzzyset( afnode->trapezioidal_fuzzy_set, 1 );
    #####:  928:    if ( result1 != -1 )
        -:  929:    {
    #####:  930:        if ( result2 != -1 )
    #####:  931:            return result1 < result2;
        -:  932:        else
    #####:  933:            return -1;
        -:  934:    }
        -:  935:    else
    #####:  936:        return -1;
        -:  937:}
        -:  938:
    #####:  939:int __le__( fnode * self, fnode * afnode )
        -:  940:{
    #####:  941:    float result1 = -1.0;
    #####:  942:    float result2 = -1.0;
        -:  943:
    #####:  944:    if ( self->triangular_fuzzy_set != NULL )
    #####:  945:        result1 = center_of_gravity_OfTriangularFuzzyset( self->triangular_fuzzy_set, 1 );
    #####:  946:    if ( self->trapezioidal_fuzzy_set != NULL )
    #####:  947:        result1 = center_of_gravity_OfTrapezioidalFuzzyset( self->trapezioidal_fuzzy_set, 1 );
    #####:  948:    if ( afnode->triangular_fuzzy_set != NULL )
    #####:  949:        result2 = center_of_gravity_OfTriangularFuzzyset( afnode->triangular_fuzzy_set, 1 );
    #####:  950:    if ( afnode->trapezioidal_fuzzy_set != NULL )
    #####:  951:        result2 = center_of_gravity_OfTrapezioidalFuzzyset( afnode->trapezioidal_fuzzy_set, 1 );
    #####:  952:    if ( result1 != -1 )
        -:  953:    {
    #####:  954:        if ( result2 != -1 )
    #####:  955:            return result1 <= result2;
        -:  956:        else
    #####:  957:            return -1;
        -:  958:    }
        -:  959:    else
    #####:  960:        return -1;
        -:  961:}
        -:  962:
    #####:  963:int __gt__( fnode * self, fnode * afnode )
        -:  964:{
    #####:  965:    float result1 = -1.0;
    #####:  966:    float result2 = -1.0;
        -:  967:
    #####:  968:    if ( self->triangular_fuzzy_set != NULL )
    #####:  969:        result1 = center_of_gravity_OfTriangularFuzzyset( self->triangular_fuzzy_set, 1 );
    #####:  970:    if ( self->trapezioidal_fuzzy_set != NULL )
    #####:  971:        result1 = center_of_gravity_OfTrapezioidalFuzzyset( self->trapezioidal_fuzzy_set, 1 );
    #####:  972:    if ( afnode->triangular_fuzzy_set != NULL )
    #####:  973:        result2 = center_of_gravity_OfTriangularFuzzyset( afnode->triangular_fuzzy_set, 1 );
    #####:  974:    if ( afnode->trapezioidal_fuzzy_set != NULL )
    #####:  975:        result2 = center_of_gravity_OfTrapezioidalFuzzyset( afnode->trapezioidal_fuzzy_set, 1 );
    #####:  976:    if ( result1 != -1 )
        -:  977:    {
    #####:  978:        if ( result2 != -1 )
    #####:  979:            return result1 > result2;
        -:  980:        else
    #####:  981:            return -1;
        -:  982:    }
        -:  983:    else
    #####:  984:        return -1;
        -:  985:}
        -:  986:
    #####:  987:int __ge__( fnode * self, fnode * afnode )
        -:  988:{
    #####:  989:    float result1 = -1.0;
    #####:  990:    float result2 = -1.0;
        -:  991:
    #####:  992:    if ( self->triangular_fuzzy_set != NULL )
    #####:  993:        result1 = center_of_gravity_OfTriangularFuzzyset( self->triangular_fuzzy_set, 1 );
    #####:  994:    if ( self->trapezioidal_fuzzy_set != NULL )
    #####:  995:        result1 = center_of_gravity_OfTrapezioidalFuzzyset( self->trapezioidal_fuzzy_set, 1 );
    #####:  996:    if ( afnode->triangular_fuzzy_set != NULL )
    #####:  997:        result2 = center_of_gravity_OfTriangularFuzzyset( afnode->triangular_fuzzy_set, 1 );
    #####:  998:    if ( afnode->trapezioidal_fuzzy_set != NULL )
    #####:  999:        result2 = center_of_gravity_OfTrapezioidalFuzzyset( afnode->trapezioidal_fuzzy_set, 1 );
    #####: 1000:    if ( result1 != -1 )
        -: 1001:    {
    #####: 1002:        if ( result2 != -1 )
    #####: 1003:            return result1 >= result2;
        -: 1004:        else
    #####: 1005:            return -1;
        -: 1006:    }
        -: 1007:    else
    #####: 1008:        return -1;
        -: 1009:}
        -: 1010:
    #####: 1011:int __eq__( fnode * self, fnode * afnode )
        -: 1012:{
    #####: 1013:    float result1 = -1.0;
    #####: 1014:    float result2 = -1.0;
        -: 1015:
    #####: 1016:    if ( self->triangular_fuzzy_set != NULL )
    #####: 1017:        result1 = center_of_gravity_OfTriangularFuzzyset( self->triangular_fuzzy_set, 1 );
    #####: 1018:    if ( self->trapezioidal_fuzzy_set != NULL )
    #####: 1019:        result1 = center_of_gravity_OfTrapezioidalFuzzyset( self->trapezioidal_fuzzy_set, 1 );
    #####: 1020:    if ( afnode->triangular_fuzzy_set != NULL )
    #####: 1021:        result2 = center_of_gravity_OfTriangularFuzzyset( afnode->triangular_fuzzy_set, 1 );
    #####: 1022:    if ( afnode->trapezioidal_fuzzy_set != NULL )
    #####: 1023:        result2 = center_of_gravity_OfTrapezioidalFuzzyset( afnode->trapezioidal_fuzzy_set, 1 );
    #####: 1024:    if ( result1 != -1 )
        -: 1025:    {
    #####: 1026:        if ( result2 != -1 )
    #####: 1027:            return result1 == result2;
        -: 1028:        else
    #####: 1029:            return -1;
        -: 1030:    }
        -: 1031:    else
    #####: 1032:        return -1;
        -: 1033:}
        -: 1034:
    #####: 1035:int __ne__( fnode * self, fnode * afnode )
        -: 1036:{
    #####: 1037:    float result1 = -1.0;
    #####: 1038:    float result2 = -1.0;
        -: 1039:
    #####: 1040:    if ( self->triangular_fuzzy_set != NULL )
    #####: 1041:        result1 = center_of_gravity_OfTriangularFuzzyset( self->triangular_fuzzy_set, 1 );
    #####: 1042:    if ( self->trapezioidal_fuzzy_set != NULL )
    #####: 1043:        result1 = center_of_gravity_OfTrapezioidalFuzzyset( self->trapezioidal_fuzzy_set, 1 );
    #####: 1044:    if ( afnode->triangular_fuzzy_set != NULL )
    #####: 1045:        result2 = center_of_gravity_OfTriangularFuzzyset( afnode->triangular_fuzzy_set, 1 );
    #####: 1046:    if ( afnode->trapezioidal_fuzzy_set != NULL )
    #####: 1047:        result2 = center_of_gravity_OfTrapezioidalFuzzyset( afnode->trapezioidal_fuzzy_set, 1 );
    #####: 1048:    if ( result1 != -1 )
        -: 1049:    {
    #####: 1050:        if ( result2 != -1 )
    #####: 1051:            return result1 != result2;
        -: 1052:        else
    #####: 1053:            return -1;
        -: 1054:    }
        -: 1055:    else
    #####: 1056:        return -1;
        -: 1057:}
        -: 1058:
        2: 1059:Fuzzysets * InitFuzzysets(void)
        -: 1060:{
        2: 1061:    Fuzzysets * self = malloc( sizeof(Fuzzysets) );
        2: 1062:    self->count = 0;
        2: 1063:    self->first = NULL;
        2: 1064:    return self;
        -: 1065:}
        -: 1066:
    #####: 1067:void FreeFuzzysets( Fuzzysets * self )
        -: 1068:{
    #####: 1069:    fnode * cur = NULL;
    #####: 1070:    fnode * next = NULL;
        -: 1071:
    #####: 1072:    if ( self != NULL )
        -: 1073:    {
    #####: 1074:        cur = self->first;
    #####: 1075:        while ( cur != NULL )
        -: 1076:        {
    #####: 1077:            next = cur->next;
    #####: 1078:            FreeFnode(cur);
    #####: 1079:            cur = next;
        -: 1080:        }
    #####: 1081:        free(self);
    #####: 1082:        self = NULL;
        -: 1083:    }
    #####: 1084:    return ;
        -: 1085:}
        -: 1086:
        2: 1087:void AddFnode( Fuzzysets * self, fnode * fptr )
        -: 1088:{
        2: 1089:    fnode * cur = self->first;
        -: 1090:
        2: 1091:    if ( cur == NULL )
        1: 1092:        self->first = fptr;
        -: 1093:    else
        -: 1094:    {
        1: 1095:        while ( cur->next != NULL )
    #####: 1096:            cur = cur->next;
        1: 1097:        cur->next = fptr;
        -: 1098:    }
        2: 1099:    self->count++;
        2: 1100:}
        -: 1101:
        2: 1102:void addFuzzyset( FuzzyVariable * self, cstring * name, clist * values )
        -: 1103:{
        2: 1104:    fnode * fptr = NULL;
        2: 1105:    TriangularFuzzyset * triangular_fuzzy_set = NULL;
        2: 1106:    TrapezioidalFuzzyset * trapezioidal_fuzzy_set = NULL;
        2: 1107:    GaussianFuzzySet * gaussian_fuzzy_set = NULL;
        2: 1108:    inode * cur = NULL;
        2: 1109:    float v0 = 0;
        2: 1110:    float v1 = 0;
        2: 1111:    float v2 = 0;
        2: 1112:    float v3 = 0;
        2: 1113:    clist * array = NULL;
        -: 1114:
        2: 1115:    if ( self->max_value == -1 && self->min_value )
        -: 1116:    {
        1: 1117:        self->max_value = ClistMax( values );
        1: 1118:        self->min_value = ClistMin( values );
        -: 1119:    }
        -: 1120:    else
        -: 1121:    {
        1: 1122:        if ( self->max_value < ClistMax( values ) )
    #####: 1123:            self->max_value = ClistMax( values );
        1: 1124:        if ( self->min_value > ClistMin( values ) )
    #####: 1125:            self->min_value = ClistMin( values );
        -: 1126:    }
        2: 1127:    if ( values->count == 3 )
        -: 1128:    {
        1: 1129:        triangular_fuzzy_set = InitTriangularFuzzyset( values, CstrtoStr(name) );
        1: 1130:        fptr = FindFnode( self->fuzzy_sets, name );
        1: 1131:        if ( fptr != NULL )
        -: 1132:        {
    #####: 1133:            FlushFnode( fptr );
    #####: 1134:            SetFnodeTriangular( fptr, triangular_fuzzy_set, name );
        -: 1135:        }
        -: 1136:        else
        -: 1137:        {
        1: 1138:            fptr = InitFnode();
        1: 1139:            SetFnodeTriangular( fptr, triangular_fuzzy_set, name );
        1: 1140:            AddFnode( self->fuzzy_sets, fptr );
        -: 1141:        }
        -: 1142:    }
        1: 1143:    else if ( values->count == 4 )
        -: 1144:    {
        1: 1145:        cur = values->first;
        1: 1146:        v0 = cur->number;
        1: 1147:        cur = cur->next;
        1: 1148:        v1 = cur->number;
        1: 1149:        cur = cur->next;
        1: 1150:        v2 = cur->number;
        1: 1151:        cur = cur->next;
        1: 1152:        v3 = cur->number;
        1: 1153:        if ( v1 == v2 )
        -: 1154:        {
    #####: 1155:            array = InitClist( NULL, 0 );
    #####: 1156:            ClistAppend( array, v0 );
    #####: 1157:            ClistAppend( array, v1 );
    #####: 1158:            ClistAppend( array, v3 );
    #####: 1159:            triangular_fuzzy_set = InitTriangularFuzzyset( array, CstrtoStr(name) );
    #####: 1160:            fptr = FindFnode( self->fuzzy_sets, name );
    #####: 1161:            if ( fptr != NULL )
        -: 1162:            {
    #####: 1163:                FlushFnode( fptr );
    #####: 1164:                SetFnodeTriangular( fptr, triangular_fuzzy_set, name );
        -: 1165:            }
        -: 1166:            else
        -: 1167:            {
    #####: 1168:                fptr = InitFnode();
    #####: 1169:                SetFnodeTriangular( fptr, triangular_fuzzy_set, name );
    #####: 1170:                AddFnode( self->fuzzy_sets, fptr );
        -: 1171:            }
        -: 1172:        }
        -: 1173:        else
        -: 1174:        {
        1: 1175:            trapezioidal_fuzzy_set = InitTrapezioidalFuzzyset( values, CstrtoStr(name) );
        1: 1176:            fptr = FindFnode( self->fuzzy_sets, name );
        1: 1177:            if ( fptr != NULL )
        -: 1178:            {
    #####: 1179:                FlushFnode( fptr );
    #####: 1180:                SetFnodeTrapezioidal( fptr, trapezioidal_fuzzy_set, name );
        -: 1181:            }
        -: 1182:            else
        -: 1183:            {
        1: 1184:                fptr = InitFnode();
        1: 1185:                SetFnodeTrapezioidal( fptr, trapezioidal_fuzzy_set, name );
        1: 1186:                AddFnode( self->fuzzy_sets, fptr );
        -: 1187:            }
        -: 1188:        }
        -: 1189:    }
    #####: 1190:    else if ( values->count == 2 )
        -: 1191:    {
    #####: 1192:        gaussian_fuzzy_set = InitGaussianFuzzySet( values, CstrtoStr(name) );
    #####: 1193:        fptr = FindFnode( self->fuzzy_sets, name );
    #####: 1194:        if ( fptr != NULL )
        -: 1195:        {
    #####: 1196:            FlushFnode( fptr );
    #####: 1197:            SetFnodeGaussian( fptr, gaussian_fuzzy_set, name );
        -: 1198:        }
        -: 1199:        else
        -: 1200:        {
    #####: 1201:            fptr = InitFnode();
    #####: 1202:            SetFnodeGaussian( fptr, gaussian_fuzzy_set, name );
    #####: 1203:            AddFnode( self->fuzzy_sets, fptr );
        -: 1204:        }
        -: 1205:    }
        2: 1206:}
        -: 1207:
        2: 1208:fnode * FindFnode( Fuzzysets * self, cstring * name )
        -: 1209:{
        2: 1210:    fnode * cur = self->first;
        -: 1211:
        4: 1212:    while ( cur != NULL )
        -: 1213:    {
        1: 1214:        if ( !Cstrcmp( cur->name, name)  )
    #####: 1215:            return cur;
        1: 1216:        cur = cur->next;
        -: 1217:    }
        -: 1218:
        2: 1219:    return cur;
        -: 1220:}
        -: 1221:
    #####: 1222:int editFuzzyset( FuzzyVariable * self, cstring * name, clist * values )
        -: 1223:{
    #####: 1224:    fnode * fptr = NULL;
    #####: 1225:    TriangularFuzzyset * triangular_fuzzy_set = NULL;
    #####: 1226:    TrapezioidalFuzzyset * trapezioidal_fuzzy_set = NULL;
    #####: 1227:    GaussianFuzzySet * gaussian_fuzzy_set = NULL;
        -: 1228:
    #####: 1229:    fptr = FindFnode( self->fuzzy_sets, name );
    #####: 1230:    if ( fptr != NULL )
        -: 1231:    {
    #####: 1232:        if ( self->max_value < ClistMax( values ) )
    #####: 1233:            self->max_value = ClistMax( values );
    #####: 1234:        if ( self->min_value > ClistMin( values ) )
    #####: 1235:            self->min_value = ClistMin( values );
    #####: 1236:        if ( values->count == 3 )
        -: 1237:        {
    #####: 1238:            triangular_fuzzy_set = InitTriangularFuzzyset( values, CstrtoStr(name) );
    #####: 1239:            FlushFnode( fptr );
    #####: 1240:            SetFnodeTriangular( fptr, triangular_fuzzy_set, name );
        -: 1241:        }
    #####: 1242:        else if ( values->count == 4 )
        -: 1243:        {
    #####: 1244:            trapezioidal_fuzzy_set = InitTrapezioidalFuzzyset( values, CstrtoStr(name) );
    #####: 1245:            FlushFnode( fptr );
    #####: 1246:            SetFnodeTrapezioidal( fptr, trapezioidal_fuzzy_set, name );
        -: 1247:        }
    #####: 1248:        else if ( values->count == 2 )
        -: 1249:        {
    #####: 1250:            gaussian_fuzzy_set = InitGaussianFuzzySet( values, CstrtoStr(name) );
    #####: 1251:            FlushFnode( fptr );
    #####: 1252:            SetFnodeGaussian( fptr, gaussian_fuzzy_set, name );
        -: 1253:        }
    #####: 1254:        return 1;
        -: 1255:    }
        -: 1256:    else
    #####: 1257:        return 0;
        -: 1258:}
        -: 1259:
        1: 1260:FuzzyVariable * InitFuzzyVariable( char * name )
        -: 1261:{
        1: 1262:    FuzzyVariable * self = malloc( sizeof(FuzzyVariable) );
        -: 1263:
        1: 1264:    char * source = name;
        -: 1265:
        1: 1266:    cstring * str = NULL;
        1: 1267:    int i = 0;
        1: 1268:    snode * sptr = NULL;
        1: 1269:    snode * cur = NULL;
        -: 1270:
        1: 1271:    str = malloc( sizeof(cstring) );
        1: 1272:    if ( source == NULL )
        -: 1273:    {
    #####: 1274:        str->first = NULL;
    #####: 1275:        str->count = 0;
        -: 1276:    }
        -: 1277:    else
        -: 1278:    {
        1: 1279:        sptr = InitSnode(source[0]);
        1: 1280:        str->first = cur = sptr;
        4: 1281:        for ( i = 1; source[i] != '\0'; i++ )
        -: 1282:        {
        3: 1283:            sptr = InitSnode(source[i]);
        3: 1284:            cur->next = sptr;
        3: 1285:            cur = sptr;
        -: 1286:        }
        1: 1287:        str->count = i;
        -: 1288:    }
        -: 1289:
        1: 1290:    self->name = str;
        -: 1291:
        1: 1292:    self->max_value = -1;
        1: 1293:    self->min_value = -1;
        1: 1294:    self->fuzzy_sets = InitFuzzysets();
        1: 1295:    return self;
        -: 1296:}
        -: 1297:
    #####: 1298:void FreeFuzzyVariable( FuzzyVariable * self )
        -: 1299:{
    #####: 1300:    if ( self != NULL )
        -: 1301:    {
    #####: 1302:        FreeCstring(&(self->name));
    #####: 1303:        FreeFuzzysets(self->fuzzy_sets);
    #####: 1304:        free(self);
    #####: 1305:        self = NULL;
        -: 1306:    }
    #####: 1307:    return ;
        -: 1308:}
        -: 1309:
    #####: 1310:float degreeOfFuzzyVariable( FuzzyVariable * self, float c, cstring * fuzzy_set )
        -: 1311:{
    #####: 1312:    float crisp = c;
    #####: 1313:    fnode * fptr = NULL;
        -: 1314:
    #####: 1315:    if ( crisp > self->max_value )
    #####: 1316:        crisp = self->max_value;
    #####: 1317:    if ( crisp < self->min_value )
    #####: 1318:        crisp = self->min_value;
    #####: 1319:    fptr = FindFnode( self->fuzzy_sets, fuzzy_set );
    #####: 1320:    if ( fptr->triangular_fuzzy_set != NULL )
    #####: 1321:        return degreeOfTriangularFuzzyset( fptr->triangular_fuzzy_set, crisp );
    #####: 1322:    if ( fptr->trapezioidal_fuzzy_set != NULL )
    #####: 1323:        return degreeOfTrapezioidalFuzzyset( fptr->trapezioidal_fuzzy_set, crisp );
    #####: 1324:    if ( fptr->gaussian_fuzzy_set != NULL )
    #####: 1325:        return degreeOfGaussianFuzzySet( fptr->gaussian_fuzzy_set, crisp );
    #####: 1326:    return -1.0;
        -: 1327:}
        -: 1328:
    #####: 1329:cdictlist * get_fuzzysets( FuzzyVariable * self )
        -: 1330:{
    #####: 1331:    cdictlist * lptr = NULL;
    #####: 1332:    cdictnode * cptr = NULL;
    #####: 1333:    fnode * fptr = NULL;
    #####: 1334:    Fuzzysets * fuzzy_sets = self->fuzzy_sets;
        -: 1335:
    #####: 1336:    lptr = InitCdictlist();
    #####: 1337:    fptr = fuzzy_sets->first;
    #####: 1338:    while ( fptr != NULL )
        -: 1339:    {
    #####: 1340:        cptr = InitCdictnode();
    #####: 1341:        if ( fptr->triangular_fuzzy_set != NULL )
    #####: 1342:            SetCdictnode( cptr, getDictOfTriangularFuzzyset(fptr->triangular_fuzzy_set) );
    #####: 1343:        if ( fptr->trapezioidal_fuzzy_set != NULL )
    #####: 1344:            SetCdictnode( cptr, getDictOfTrapezioidalFuzzyset(fptr->trapezioidal_fuzzy_set) );
    #####: 1345:        if ( fptr->gaussian_fuzzy_set != NULL )
    #####: 1346:            SetCdictnode( cptr, getDictOfGaussianFuzzySet(fptr->gaussian_fuzzy_set) );
    #####: 1347:        CdictlistAddCdictnode( lptr, cptr );
    #####: 1348:        fptr = fptr->next;
        -: 1349:    }
    #####: 1350:    CdictlistSort( lptr );
        -: 1351:
    #####: 1352:    return lptr;
        -: 1353:}
        -: 1354:
    #####: 1355:cdict * get_degrees( FuzzyVariable * self, float c )
        -: 1356:{
    #####: 1357:    float crisp = c;
    #####: 1358:    cdict * d = InitCdict();
    #####: 1359:    fnode * cur = NULL;
    #####: 1360:    fnode * next = NULL;
    #####: 1361:    dnode * dk = NULL;
    #####: 1362:    Fuzzysets * fuzzy_sets = self->fuzzy_sets;
    #####: 1363:    float degree = 0;
    #####: 1364:    cstring * curName = NULL;
        -: 1365:
    #####: 1366:    cur = fuzzy_sets->first;
    #####: 1367:    while ( cur != NULL )
        -: 1368:    {
    #####: 1369:        curName = cur->name;
    #####: 1370:        next = cur->next;
        -: 1371:
    #####: 1372:        dk = InitDnode();
    #####: 1373:        degree = degreeOfFuzzyVariable( self, crisp, cur->name );
    #####: 1374:        SetDnodeDegree( dk, curName, degree );
    #####: 1375:        AddDnode( d, dk );
    #####: 1376:        cur = next;
        -: 1377:    }
        -: 1378:
    #####: 1379:    return d;
        -: 1380:}
        -: 1381:
    #####: 1382:char * __str__FuzzyVariable( FuzzyVariable * self )
        -: 1383:{
    #####: 1384:    cstring * string = NULL;
    #####: 1385:    Fuzzysets * fuzzy_sets = self->fuzzy_sets;
    #####: 1386:    fnode * fptr = fuzzy_sets->first;
    #####: 1387:    int i = 0;
    #####: 1388:    int count = fuzzy_sets->count;
    #####: 1389:    char * minValueStr = NULL;
    #####: 1390:    char * maxValueStr = NULL;
    #####: 1391:    char * FuzzyVariableStr = NULL;
        -: 1392:
    #####: 1393:    char * source = NULL;
        -: 1394:
    #####: 1395:    cstring * str = NULL;
    #####: 1396:    i = 0;
    #####: 1397:    snode * sptr = NULL;
    #####: 1398:    snode * cur = NULL;
        -: 1399:
    #####: 1400:    str = malloc( sizeof(cstring) );
    #####: 1401:    if ( source == NULL )
        -: 1402:    {
    #####: 1403:        str->first = NULL;
    #####: 1404:        str->count = 0;
        -: 1405:    }
        -: 1406:    else
        -: 1407:    {
    #####: 1408:        sptr = InitSnode(source[0]);
    #####: 1409:        str->first = cur = sptr;
    #####: 1410:        for ( i = 1; source[i] != '\0'; i++ )
        -: 1411:        {
    #####: 1412:            sptr = InitSnode(source[i]);
    #####: 1413:            cur->next = sptr;
    #####: 1414:            cur = sptr;
        -: 1415:        }
    #####: 1416:        str->count = i;
        -: 1417:    }
        -: 1418:
    #####: 1419:    string = str;
        -: 1420:
    #####: 1421:    SetCstring( &string, self->name );
    #####: 1422:    Cstradd( &string, ": MIN(" );
    #####: 1423:    minValueStr = NumtoStr( self->min_value );
    #####: 1424:    Cstradd( &string, minValueStr );
    #####: 1425:    Cstradd( &string, ") - MAX(" );
    #####: 1426:    maxValueStr = NumtoStr( self->max_value );
    #####: 1427:    Cstradd( &string, NumtoStr( self->max_value ) );
    #####: 1428:    Cstradd( &string, ")" );
        -: 1429:
    #####: 1430:    for ( i = 0; i < count; i++ )
        -: 1431:    {
    #####: 1432:        Cstradd( &string, "\n" );
    #####: 1433:        Cstradd( &string, __str__Fnode( fptr ) );
    #####: 1434:        fptr = fptr->next;
        -: 1435:    }
        -: 1436:
    #####: 1437:    FuzzyVariableStr = CstrtoStr( string );
    #####: 1438:    return FuzzyVariableStr;
        -: 1439:}
        -: 1440:
        1: 1441:cdictdict * getDictOfFuzzyVariable( FuzzyVariable * self )
        -: 1442:{
        1: 1443:    cdictdict * d = InitCdictdict();
        1: 1444:    fnode * fptr = NULL;
        1: 1445:    cdictnode * ptr = InitCdictnode();
        1: 1446:    Fuzzysets * fuzzy_sets = self->fuzzy_sets;
        -: 1447:
        1: 1448:    SetCdictnodeDict( ptr, InitCstring( "name" ), NULL, InitCstring( CstrtoStr(self->name) ) );
        1: 1449:    CdictdictAddCdictnode( d, ptr );
        1: 1450:    fptr = fuzzy_sets->first;
        5: 1451:    while ( fptr != NULL )
        -: 1452:    {
        2: 1453:        ptr = InitCdictnode();
        2: 1454:        if ( fptr->fuzzy_set != NULL )
    #####: 1455:            SetCdictnodeDict( ptr, InitCstring( CstrtoStr(fptr->name) ), getDictOfFuzzyset( fptr->fuzzy_set ), NULL);
        2: 1456:        if ( fptr->triangular_fuzzy_set != NULL )
        1: 1457:            SetCdictnodeDict( ptr, InitCstring( CstrtoStr(fptr->name) ), getDictOfTriangularFuzzyset( fptr->triangular_fuzzy_set ), NULL);
        2: 1458:        if ( fptr->trapezioidal_fuzzy_set != NULL )
        1: 1459:            SetCdictnodeDict( ptr, InitCstring( CstrtoStr(fptr->name) ), getDictOfTrapezioidalFuzzyset( fptr->trapezioidal_fuzzy_set ), NULL);
        2: 1460:        if ( fptr->gaussian_fuzzy_set != NULL )
    #####: 1461:            SetCdictnodeDict( ptr, InitCstring( CstrtoStr(fptr->name) ), getDictOfGaussianFuzzySet( fptr->gaussian_fuzzy_set ), NULL);
        2: 1462:        CdictdictAddCdictnode( d, ptr );
        2: 1463:        fptr = fptr->next;
        -: 1464:    }
        -: 1465:
        1: 1466:    return d;
        -: 1467:}
        -: 1468:
    #####: 1469:FuzzyVariable * InitFuzzyBooleanVariable( char * name )
        -: 1470:{
    #####: 1471:    FuzzyVariable * self = malloc( sizeof(FuzzyVariable) );
    #####: 1472:    fnode * fptr = NULL;
    #####: 1473:    float array1[3] = { 0, 1, 2 }, array2[3] = { -1, 0, 1 };
    #####: 1474:    clist * tmpClist1 = NULL;
    #####: 1475:    clist * tmpClist2 = NULL;
        -: 1476:
    #####: 1477:    char * source = name;
        -: 1478:
    #####: 1479:    cstring * str = NULL;
    #####: 1480:    int i = 0;
    #####: 1481:    snode * sptr = NULL;
    #####: 1482:    snode * cur = NULL;
        -: 1483:
    #####: 1484:    str = malloc( sizeof(cstring) );
    #####: 1485:    if ( source == NULL )
        -: 1486:    {
    #####: 1487:        str->first = NULL;
    #####: 1488:        str->count = 0;
        -: 1489:    }
        -: 1490:    else
        -: 1491:    {
    #####: 1492:        sptr = InitSnode(source[0]);
    #####: 1493:        str->first = cur = sptr;
    #####: 1494:        for ( i = 1; source[i] != '\0'; i++ )
        -: 1495:        {
    #####: 1496:            sptr = InitSnode(source[i]);
    #####: 1497:            cur->next = sptr;
    #####: 1498:            cur = sptr;
        -: 1499:        }
    #####: 1500:        str->count = i;
        -: 1501:    }
        -: 1502:
    #####: 1503:    self->name = str;
        -: 1504:
    #####: 1505:    self->max_value = 1;
    #####: 1506:    self->min_value = 0;
    #####: 1507:    self->fuzzy_sets = InitFuzzysets();
    #####: 1508:    fptr = InitFnode();
    #####: 1509:    Cstradd( &(fptr->name), "True" );
    #####: 1510:    tmpClist1 = InitClist(array1, 3);
    #####: 1511:    fptr->triangular_fuzzy_set = InitTriangularFuzzyset( InitClist(array1, 3), "True" );
    #####: 1512:    AddFnode( self->fuzzy_sets, fptr );
    #####: 1513:    fptr = InitFnode();
    #####: 1514:    Cstradd( &(fptr->name), "False" );
    #####: 1515:    tmpClist2 = InitClist(array2, 3);
    #####: 1516:    fptr->triangular_fuzzy_set = InitTriangularFuzzyset( InitClist(array2, 3), "False" );
    #####: 1517:    AddFnode( self->fuzzy_sets, fptr );
    #####: 1518:    return self;
        -: 1519:}
